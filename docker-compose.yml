services:
  api:
    build: ./backend
    container_name: hunt_api
    ports:
      - "8000:8000"
    environment:
      OTEL_LOG_LEVEL: debug
      OTEL_PYTHON_LOG_LEVEL: debug

      # ---- OpenTelemetry (send to local Collector) ----
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel:4317
      OTEL_RESOURCE_ATTRIBUTES: deployment.environment=dev,service.version=0.1.0,service.namespace=huntapp
      OTEL_SERVICE_NAME: huntapp-api
      OTEL_PYTHON_LOG_CORRELATION: "true"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_TRACES_SAMPLER: parentbased_always_on
      OTEL_PYTHON_ASGI_EXCLUDED_URLS: ""        # override any defaults
      OTEL_PYTHON_FASTAPI_EXCLUDED_URLS: /health     # override any defaults
      OTEL_PYTHON_INSTRUMENTATION_HTTP_SERVER_EXCLUDED_URLS: ""  # belt & suspenders

      # ---- S3 (MinIO) ----
      S3_PUBLIC_URL: http://localhost:9000  # emit public URLs for clients

      # ---- App-specific ----
      ELASTIC_SEARCH_HOST: ${ELASTIC_SEARCH_HOST}
      ELASTIC_SEARCH_API_KEY: ${ELASTIC_SEARCH_API_KEY}
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: trailcam-images
      API_CORS_ALLOW_ORIGINS: http://localhost:3001
    depends_on:
      - minio
      - minio-init
      - redis
      - otel
    command: [ "opentelemetry-instrument", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000" ]

  worker:
    build: ./backend
    container_name: hunt_worker
    environment:

      OTEL_LOG_LEVEL: debug
      OTEL_PYTHON_LOG_LEVEL: debug

      # ---- OpenTelemetry (send to local Collector) ----
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel:4317
      OTEL_RESOURCE_ATTRIBUTES: deployment.environment=dev,service.version=0.1.0,service.namespace=huntapp
      OTEL_SERVICE_NAME: huntapp-worker
      OTEL_PYTHON_LOG_CORRELATION: "true"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_TRACES_SAMPLER: parentbased_always_on
      OTEL_PYTHON_ASGI_EXCLUDED_URLS: ""
      OTEL_PYTHON_FASTAPI_EXCLUDED_URLS: ""
      OTEL_PYTHON_INSTRUMENTATION_HTTP_SERVER_EXCLUDED_URLS: ""

      # ---- S3 (MinIO) ----
      S3_ENDPOINT: http://minio:9000        # keep SDK calls internal
      S3_PUBLIC_URL: http://localhost:9000  # emit public URLs for clients

      # ---- App-specific ----
      ELASTIC_SEARCH_HOST: ${ELASTIC_SEARCH_HOST}
      ELASTIC_SEARCH_API_KEY: ${ELASTIC_SEARCH_API_KEY}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - redis
      - otel
    command: [ "opentelemetry-instrument", "python", "-m", "app.worker" ]

  web:
    build: ./web
    container_name: hunt_web
    ports:
      - "3001:3001"
    environment:
      NEXT_PUBLIC_API_BASE: http://localhost:8000
    depends_on:
      - api

  redis:
    image: redis:7
    container_name: hunt_redis
    ports:
      - "6379:6379"

  # ---- OpenTelemetry Collector (gateway to Elastic) ----
  otel:
    image: otel/opentelemetry-collector:0.103.0
    container_name: hunt_otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # gRPC OTLP
      - "4318:4318"   # HTTP OTLP (handy for testing)
      - "8888:8888"   # Collector self-metrics
    environment:
      ELASTIC_OTEL_OTLP_ENDPOINT: ${ELASTIC_OTEL_OTLP_ENDPOINT}
      ELASTIC_OTEL_API_KEY: ${ELASTIC_OTEL_API_KEY}

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: hunt_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  minio-init:
    image: minio/mc
    container_name: hunt_minio_init
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-lc"]
    command: |
      set -e
      echo "Waiting for MinIO to be ready..."
      until mc alias set local http://minio:9000 "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}" >/dev/null 2>&1; do
        sleep 2
      done
      echo "Creating bucket if missing..."
      mc mb --ignore-existing local/trailcam-images
      echo "Setting public download policy..."
      mc anonymous set download local/trailcam-images
      echo "Bucket ready."
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}


volumes:
  minio-data:
